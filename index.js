// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ "grammy"
const {
  Bot,
  Keyboard,
  InlineKeyboard,
  GrammyError,
  HttpError,
} = require("grammy");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π getRandomQuestion –∏ getCorrectAnswer –∏–∑ —Ñ–∞–π–ª–∞ utils.js
const { getRandomQuestion, getCorrectAnswer } = require("./utils");

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API-–∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Bot(process.env.BOT_API_KEY);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  console.log("Received /start command");
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
  const startKeyboard = new Keyboard()

    .text("HTML")
    .text("CSS")
    .row()
    .text("JS/TS")
    .text("React/Redux")
    .row()
    .text("Web Technologies")
    .text("–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    .resized();

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  console.log("Sending welcome message");
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. ü§ñ –ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–º–æ—á—å —Å –∏–∑—É—á–µ–Ω–∏–µ–º."
  );

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
  console.log("Sending message with keyboard");
  await ctx.reply(
    "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —á–µ–≥–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá",
    {
      reply_markup: startKeyboard,
      parse_mode: "Markdown",
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã –∏–ª–∏ "–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
bot.hears(
  [
    "HTML",
    "CSS",
    "JS/TS",
    "React/Redux",
    "Web Technologies",
    "–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
  ],
  async (ctx) => {
    const topic = ctx.message.text.toLowerCase();

    const { question, questionTopic, error } = getRandomQuestion(topic);

    if (error) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –≤ —á–∞—Ç
      await ctx.reply(error);
      return;
    }

    let inlineKeyboard;

    if (question && question.hasOptions) {
      const buttonRows = question.options.map((option) => [
        InlineKeyboard.text(
          option.text,
          JSON.stringify({
            type: `${questionTopic}-option`,
            isCorrect: option.isCorrect,
            questionId: question.id,
          })
        ),
      ]);

      inlineKeyboard = InlineKeyboard.from(buttonRows);
    } else {
      inlineKeyboard = new InlineKeyboard().text(
        "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç",
        JSON.stringify({
          type: questionTopic,
          questionId: question.id,
        })
      );
    }

    await ctx.reply(question.text, {
      reply_markup: inlineKeyboard,
      parse_mode: "Markdown",
    });
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç" –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–µ –æ—Ç–≤–µ—Ç–∞
bot.on("callback_query:data", async (ctx) => {
  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞
  const callbackData = JSON.parse(ctx.callbackQuery.data);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  if (!callbackData.type.includes("option")) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –≤–æ–ø—Ä–æ—Å–∞ –∏ ID –≤–æ–ø—Ä–æ—Å–∞
    const answer = getCorrectAnswer(callbackData.type, callbackData.questionId);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç
    await ctx.reply(answer, {
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    });

    // –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å
    await ctx.answerCallbackQuery();
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  if (callbackData.isCorrect) {
    await ctx.reply("–í–µ—Ä–Ω–æ ‚úÖ");
    await ctx.answerCallbackQuery();
    return;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –≤–æ–ø—Ä–æ—Å–∞ –∏ ID –≤–æ–ø—Ä–æ—Å–∞
  const answer = getCorrectAnswer(
    callbackData.type.split("-")[0],
    callbackData.questionId
  );

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
  await ctx.reply(`–ù–µ–≤–µ—Ä–Ω–æ ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}`, {
    parse_mode: "Markdown",
  });

  // –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å
  await ctx.answerCallbackQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
